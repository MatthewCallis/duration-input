// Generated by CoffeeScript 1.9.3
(function() {
  var DurationInput;

  DurationInput = (function() {
    var defaults;

    defaults = {
      duration: 0,
      debug: false,
      allowedFields: ['immediately', 'days', 'hours', 'minutes'],
      allowFloats: true,
      minimum: null,
      required: false,
      required_text: 'Required',
      minimums: {
        days: 0,
        hours: 0,
        minutes: 0
      },
      classes: {
        container: 'duration-container',
        input: '',
        select: '',
        days: 'days',
        hours: 'hours',
        minutes: 'minutes',
        immediately: 'immediately'
      },
      text: {
        days: 'days',
        hours: 'hours',
        minutes: 'minutes',
        immediately: 'Immediately'
      },
      immediateCallback: function() {},
      notImmediateCallback: function() {}
    };

    function DurationInput(element, options) {
      var d, duration, error, field, h, j, len, m, onInput, option, ref, s, type, value;
      if (options == null) {
        options = {};
      }
      if (!element) {
        return;
      }
      this.element = element;
      this.settings = this.merge(defaults, options);
      this.container = document.createElement('div');
      this.container.classList.add(this.settings.classes.container);
      if (!this.settings.debug) {
        this.element.style.visibility = 'hidden';
        this.element.style.position = 'absolute';
        this.element.style.height = 0;
        this.element.style.width = 0;
      }
      if (this.element.parentNode) {
        this.element.parentNode.insertBefore(this.container, this.element.nextSibling);
      }
      value = this.element.value;
      try {
        value = parseInt(value);
      } catch (_error) {
        error = _error;
        value = this.settings.duration;
      }
      if (isNaN(value)) {
        value = this.settings.duration;
      }
      if (this.settings.allowFloats) {
        d = value / 86400;
        h = (value / 3600) % 24;
        m = (value / 60) % 60;
        s = value % 60;
      } else {
        d = Math.floor(value / 86400);
        h = Math.floor((value / 3600) % 24);
        m = Math.floor((value / 60) % 60);
        s = Math.floor(value % 60);
      }
      duration = document.createElement('input');
      duration.type = 'number';
      duration.name = this.element.name + "_duration";
      duration.className = "duration " + this.settings.classes.input;
      if (this.settings.required) {
        duration.required = true;
        duration.setAttribute('data-msg', this.settings.required_text);
      }
      duration.setAttribute('step', 1);
      duration.setAttribute('min', this.settings.minimum || 0);
      type = document.createElement('select');
      type.classNames = "type " + this.settings.classes.select;
      ref = this.settings.allowedFields;
      for (j = 0, len = ref.length; j < len; j++) {
        field = ref[j];
        option = document.createElement('option');
        option.className = this.settings.classes[field];
        option.textContent = this.settings.text[field];
        option.value = field;
        type.appendChild(option);
      }
      type.addEventListener('change', (function(_this) {
        return function(ev) {
          if (type.value === 'immediately') {
            duration.style.display = 'none';
            return _this.settings.immediateCallback();
          } else {
            duration.style.display = null;
            return _this.settings.notImmediateCallback();
          }
        };
      })(this));
      if (this.settings.allowedFields.length === 1) {
        type.style.display = 'none';
      }
      if (Math.floor(d) !== 0) {
        type.value = 'days';
        duration.value = d;
        duration.style.display = null;
      } else if (Math.floor(h) !== 0) {
        type.value = 'hours';
        duration.value = h;
        duration.style.display = null;
      } else if (m > 0 || s > 0) {
        type.value = 'minutes';
        duration.value = m;
        duration.style.display = null;
      } else {
        if (this.settings.allowedFields.indexOf('immediately') !== -1) {
          type.value = 'immediately';
          duration.value = 0;
          duration.style.display = 'none';
        } else {
          type.value = 'minutes';
          duration.value = s;
          duration.style.display = null;
        }
      }
      if (this.settings.allowedFields.indexOf('immediately') === -1) {
        duration.style.display = null;
      }
      this.container.appendChild(duration);
      this.container.appendChild(type);
      onInput = (function(_this) {
        return function(ev) {
          var new_d, new_h, new_m;
          new_d = new_h = new_m = 0;
          if (type.value === 'days') {
            new_d = duration.value;
          }
          if (type.value === 'hours') {
            new_h = duration.value;
          }
          if (type.value === 'minutes') {
            new_m = duration.value;
          }
          if (type.value === 'immediately') {
            new_d = new_h = new_m = 0;
          }
          _this.element.value = _this.toSeconds(new_d, new_h, new_m, 0);
          return _this.triggerEvents(['input', 'change'], _this.element);
        };
      })(this);
      this.container.addEventListener('keydown', this.numericOnly);
      this.container.addEventListener('input', onInput);
      this.container.addEventListener('change', onInput);
      this.element.value = this.toSeconds(d, h, m, null);
      this.triggerEvents(['input', 'change'], this.element);
    }

    DurationInput.prototype.toSeconds = function(d, h, m, s) {
      var time;
      if (d == null) {
        d = 0;
      }
      if (h == null) {
        h = 0;
      }
      if (m == null) {
        m = 0;
      }
      if (s == null) {
        s = 0;
      }
      time = (d * 24 * 60 * 60) + (h * 60 * 60) + (m * 60) + s;
      return parseInt(time);
    };

    DurationInput.prototype.triggerEvents = function(events, element) {
      var ev, event, j, len;
      for (j = 0, len = events.length; j < len; j++) {
        event = events[j];
        ev = document.createEvent('HTMLEvents');
        ev.initEvent(event, true, false);
        element.dispatchEvent(ev);
      }
    };

    DurationInput.prototype.numericOnly = function(e) {
      if ([46, 8, 9, 27, 13, 110].indexOf(e.which) !== -1) {
        return;
      }
      if ([190].indexOf(e.which) !== -1 && !(e.currentTarget.value && e.currentTarget.value.match(/\./g))) {
        return;
      }
      if ((e.ctrlKey || e.metaKey) === true && [65, 67, 86, 88, 90].indexOf(e.which) !== -1) {
        return;
      }
      if (e.which >= 35 && e.which <= 40) {
        return;
      }
      if ((e.shiftKey || (e.which < 48 || e.which > 57)) && (e.which < 96 || e.which > 105)) {
        e.preventDefault();
      }
    };

    DurationInput.prototype.merge = function() {
      var i, key, obj, result;
      result = {};
      i = 0;
      while (i < arguments.length) {
        obj = arguments[i];
        for (key in obj) {
          if (Object.prototype.toString.call(obj[key]) === '[object Object]') {
            if (typeof result[key] === 'undefined') {
              result[key] = {};
            }
            result[key] = this.merge(result[key], obj[key]);
          } else {
            result[key] = obj[key];
          }
        }
        i += 1;
      }
      return result;
    };

    return DurationInput;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : window).DurationInput = DurationInput;

  (function(factory) {
    if (typeof define === "function" && define.amd) {
      define(["jquery"], factory);
    } else if (typeof exports === "object") {
      factory(require("jquery"));
    } else {
      factory(jQuery);
    }
  })(function($) {
    $.fn['durationInput'] = function(options) {
      return this.each(function() {
        if (!($.data(this, 'plugin_durationInput') || $(this).parent().hasClass('duration-container'))) {
          $.data(this, 'plugin_durationInput', new DurationInput(this, options));
        }
      });
    };
  });

}).call(this);
